package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Gamepad;
import com.qualcomm.robotcore.hardware.HardwareDevice;
import com.qualcomm.robotcore.hardware.HardwareMap;
import com.qualcomm.robotcore.hardware.Servo;

/**
 * Created by Student on 10/11/2017.
 */
@TeleOp(name="Teleop", group="TeleOp")

public class TeleOp1 extends LinearOpMode {
    enum mode{
        glyphMode,
        relicMode
    }

    public mode currentMode=mode.glyphMode;

    HardwareMap hwMap;

    Servo jewelDown=null;
    Servo jewelKnock=null;
    DcMotor LeftMotor1 = null;
    DcMotor RightMotor1 = null;
    DcMotor LeftMotor2 = null;
    DcMotor RightMotor2 = null;
    DcMotor ArmElevation = null;
    DcMotor ArmExtension = null;
    DcMotor ArmRetraction = null;
    Servo grabber1 = null;
    Servo grabber2 = null;
    float currentGrabberPos1=1;
    float currentGrabberPos2=0;
    float currentGrabberPos3=0;
    float currentGrabberPos4=0;
    Servo grabber3 = null;
    Servo grabber4 = null;

    Servo relicGrabber=null;
    CRServo relicLift=null;
    Servo gearShift=null;

    float relicLiftPos=0;
    float relicGrabberPos=0;
    float gearShiftPos=.23f;

    // Intialize Motors
    @Override
    public void runOpMode() throws InterruptedException {

        initialize();

        waitForStart();
        while (opModeIsActive()) {
            LeftMotor1.setPower(Math.pow(gamepad1.left_stick_y,5));
            RightMotor1.setPower(Math.pow(gamepad1.right_stick_y,5));
            LeftMotor2.setPower(Math.pow(gamepad1.left_stick_y,5));
            RightMotor2.setPower(Math.pow(gamepad1.right_stick_y,5));





            //gearShift
            if (gamepad2.x) {
                gearShiftPos = -.09f;
            } else if (gamepad2.y) {
                gearShiftPos = .23f;
            }

            gearShift.setPosition(gearShiftPos);



            if(currentMode==mode.relicMode && gamepad1.a){
                currentMode=mode.glyphMode;
            }

            if(currentMode==mode.glyphMode && gamepad1.y){
                currentMode=mode.relicMode;
            }


            //relics
            if(currentMode==mode.relicMode) {
                ArmExtension.setPower(gamepad2.right_stick_y);
                ArmRetraction.setPower(gamepad2.right_stick_y);

                //should result in just arm extension
                if (gamepad2.dpad_up) {
                    ArmExtension.setPower(1);
                    ArmRetraction.setPower(1);
                } else if (gamepad2.dpad_down){
                    ArmExtension.setPower(-1);
                    ArmRetraction.setPower(-1);
                } else {
                    ArmExtension.setPower(0);
                    ArmRetraction.setPower(0);
                }




               /* if (gamepad2.left_trigger > .2) {
                    relicLiftPos += .008;
                } else if (gamepad2.left_bumper) {
                    relicLiftPos -= .008;
                }
                if(relicLiftPos>1){
                    relicLiftPos=1;
                }
                else if(relicLiftPos<0){
                    relicLiftPos=0;
                }

                relicLift.setPosition(relicLiftPos);
*/if (gamepad2.left_trigger > .2) {
                    relicLift.setPower(1);
                } else if (gamepad2.left_bumper) {
                    relicLift.setPower(-1);
                }
                else{relicLift.setPower(0);}



                if (gamepad2.right_trigger > .2) {
                    relicGrabberPos += .008;
                } else if (gamepad2.right_bumper) {
                    relicGrabberPos -= .008;
                }
                if(relicGrabberPos>1){
                    relicGrabberPos=1;
                }
                else if(relicGrabberPos<0){
                    relicGrabberPos=0;
                }

                relicGrabber.setPosition(relicGrabberPos);


            }



            //glyph code
            if(currentMode==mode.glyphMode) {
                // Arm control--glyphs
                ArmElevation.setPower(gamepad2.left_stick_y);

                //should result in just the arm retracting
                if (gamepad1.left_trigger > .2) {
                    currentGrabberPos1 += .008;
                } else if (gamepad1.left_bumper) {
                    currentGrabberPos1 -= .008;
                }

                if (gamepad1.right_trigger > .2) {
                    currentGrabberPos2 -= .008;
                } else if (gamepad1.right_bumper) {
                    currentGrabberPos2 += .008;
                }

                if (currentGrabberPos1 < 0) {
                    currentGrabberPos1 = 0;
                } else if (currentGrabberPos1 > 1) {
                    currentGrabberPos1 = 1;
                }
                if (currentGrabberPos2 < 0) {
                    currentGrabberPos2 = 0;
                } else if (currentGrabberPos2 > 1) {
                    currentGrabberPos2 = 1;
                }


                if (gamepad2.left_trigger > .2) {
                    currentGrabberPos3 += .008;
                } else if (gamepad2.left_bumper) {
                    currentGrabberPos3 -= .008;
                }


                if (gamepad2.right_trigger > .2) {
                    currentGrabberPos4 -= .008;
                } else if (gamepad2.right_bumper) {
                    currentGrabberPos4 += .008;
                }

                if (currentGrabberPos3 < 0) {
                    currentGrabberPos3 = 0;
                } else if (currentGrabberPos3 > 1) {
                    currentGrabberPos3 = 1;
                }
                if (currentGrabberPos4 < 0) {
                    currentGrabberPos4 = 0;
                } else if (currentGrabberPos4 > 1) {
                    currentGrabberPos4 = 1;
                }


                grabber1.setPosition(currentGrabberPos1);
                grabber2.setPosition(currentGrabberPos2);
                grabber3.setPosition(currentGrabberPos3);
                grabber4.setPosition(currentGrabberPos4);
            }




        }



    }

    public void initialize() {
        hwMap = hardwareMap;
        LeftMotor1=hwMap.dcMotor.get("L1");
        LeftMotor2=hwMap.dcMotor.get("L2");
        jewelDown =hwMap.servo.get("jewelDrop");
        jewelKnock=hwMap.servo.get("jewelKnock");
        RightMotor1 = hwMap.dcMotor.get("R1");
        RightMotor2 = hwMap.dcMotor.get("R2");
        ArmElevation = hwMap.dcMotor.get("elev"); //elevation
        ArmExtension = hwMap.dcMotor.get("ext"); //extention
        ArmRetraction = hwMap.dcMotor.get("ret");  //retraction
        grabber1=hwMap.servo.get("gg1");
        grabber2=hwMap.servo.get("gg2");
        grabber3=hwMap.servo.get("gg3");
        grabber4=hwMap.servo.get("gg4");




        relicLift=hwMap.crservo.get("relicLift");
        relicGrabber=hwMap.servo.get("relicGrabber");
        gearShift=hwMap.servo.get("gearShift");

        relicGrabber.setPosition(0);
        relicLift.setDirection(DcMotorSimple.Direction.FORWARD);
        gearShift.setPosition(.23);


        grabber1.setPosition(1);
        grabber2.setPosition(0);
        grabber3.setPosition(1);
        grabber4.setPosition(1);

        RightMotor1.setDirection(DcMotorSimple.Direction.FORWARD);
        RightMotor2.setDirection(DcMotorSimple.Direction.FORWARD);
        LeftMotor1.setDirection(DcMotorSimple.Direction.REVERSE);
        LeftMotor2.setDirection(DcMotorSimple.Direction.REVERSE);
        ArmElevation.setDirection(DcMotorSimple.Direction.REVERSE);


    }
}
